<?php

namespace haqqi\metronic\controllers;

use haqqi\metronic\models\Crop;
use haqqi\metronic\models\Plant;
use haqqi\metronic\models\PlantRecord;
use haqqi\metronic\models\Stage;

use yii\web\Controller;

class HarvestController extends Controller
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->layout = '@haqqi/metronic/views/layouts/main';
    }

    public function actionIndex($plantId = 1)
    {
        $plant = Plant::find()->where(['id' => $plantId])->one();

        $records = PlantRecord::find()->where(['plant.id' => $plant->id])->joinWith([
            'plant',
            'day',
            'day.weather'
        ])->orderBy(['plant_record.id' => SORT_ASC])->all();

        $stagesRaw = Stage::find()->where(['cropId' => $plant->cropId])->all();
        $stages    = [];
        foreach ($stagesRaw as $s) {
            $stages[$s->number] = $s;
        }

        // data to render
        $data = [];

        $state = [
            'stage' => 1,
            'days'  => $stages[1]->days,
            'sun'   => 0,
            'water' => 0,
        ];

        foreach ($records as $r) {
            // if it is harvested
            if($r->harvest) {
                if($plant->crop->regrow) {
                    $tStage = $state['stage'] - 1;
                    $state = [
                        'stage' => $tStage,
                        'days' => $stages[$tStage]->days,
                        'sun'   => 0,
                        'water' => 0,
                        'harvested' => 'harvested'
                    ];
                } else {
                    // if not regrow after harvested, break it!
                    break;
                }
            }

            $effect = [
                'sun'   => $r->day->weather->sun,
                'water' => $r->day->weather->water + $r->watercan > 2 ? 2 : $r->day->weather->water + $r->watercan
            ];

            $nextState = $this->calculateNextState($state, $effect, $plant->crop, $stages[$state['stage']]);

            if($nextState['stage'] == $plant->crop->stage) {
                $nextState['mature'] = 'yes';
            }

            $isSunFinished = $state['sun'] >= $stages[$state['stage']]->sunMin ? true : false;
            $isWaterFinished = $state['water'] >= $stages[$state['stage']]->waterMin ? true : false;

            $data[] = [
                'day'          => $r->day->number . ' (id: '.$r->id.')',
                'initialState' => $state,
                'requirements' => [
                    'sun' => 'min: '. $stages[$state['stage']]->sunMin . ($isSunFinished ? ' (okay)' : '') . '<br>max: ' . $stages[$state['stage']]->sunMax,
                    'water' => 'min: '.$stages[$state['stage']]->waterMin  . ($isWaterFinished ? ' (okay)' : ''). '<br>max: ' . $stages[$state['stage']]->waterMax,
                ],
                'weather'      => $r->day->weather->name,

                'effect'       => $effect,
                'nextState'    => $nextState
            ];

            if ($nextState['stage'] == 'died') {
                break;
            }

            // if there is next stage, reset it
            if ($nextState['stage'] > $state['stage']) {
                $nextState['days']  = $stages[$nextState['stage']]->days;
                $nextState['sun']   = 0;
                $nextState['water'] = 0;
            }

            $state = $nextState;

        }

        return $this->render('index', [
            'plant' => $plant,
            'data' => $data
        ]);
    }

    /**
     * @param $state
     * @param $effect
     * @param Crop $crop
     * @param Stage $stage
     * @return array|string
     */
    private function calculateNextState($state, $effect, $crop, $stage)
    {
        $currentStage = $state['stage'];
        $days         = $state['days'] > 0 ? $state['days'] - 1 : 0;
        $sun          = $state['sun'] + $effect['sun'];
        $water        = $state['water'] + $effect['water'];

        if ($currentStage == 'died') {
            return '';
        }

        $maxStage = $crop->stage;

        // if not mature yet
        if ($currentStage < $maxStage) {
            if ($sun > $stage->sunMax || $water > $stage->waterMax) {
                $currentStage = 'died';
            } else {
                // if fulfill the condition
                if ($days == 0 && $sun >= $stage->sunMin && $water >= $stage->waterMin) {
                    $currentStage++;

                }
            }
        } else {
            // if mature
            if ($days == 0 || $sun > $stage->sunMax && $water > $stage->waterMax) {
                $currentStage = 'died';
            }
        }

        return [
            'stage' => $currentStage,
            'days'  => $days,
            'sun'   => $sun,
            'water' => $water
        ];
    }
}